x
x[missing,]
x[!missing,]
no_RNA_data <- meta[meta$sample_type=="RNA",] %>% filter(!missing)
no_RNA_data
no_RNA_data$sample_ID
intersect(prot2$master_key, rna2$master_key)
setdiff(prot2$master_key, rna2$master_key)
data(liver.toxicity) # extract the liver toxicity data
X <- liver.toxicity$gene # use the gene expression data as the X matrix
X
head(X)
str(x)
str(X)
X[1:10,1:10]
Y <- liver.toxicity$clinic # use the clinical data as the Y matrix
Y[1:10,1:10]
match <- intersect(prot2$master_key, rna2$master_key)
prot3 <- prot2[prot2$master_key %in% match,]
prot3
prot3 <- prot2[prot2$master_key %in% match,] %>% select(-sample_ID)
prot3 <- prot2[prot2$master_key %in% match,] %>% select(-c(sample_ID))
prot3 <- prot2[prot2$master_key %in% match,] %>% dplyr::select(-c(sample_ID))
prot3
prot3 <- prot2[prot2$master_key %in% match,] %>% dplyr::select(-c(sample_ID)) %>% as.data.frame(row.names = master_key)
prot3
prot3 <- prot2[prot2$master_key %in% match,] %>% dplyr::select(-c(sample_ID)) %>% as.data.frame(row.names = .$master_key)
prot3
prot3 <- prot2[prot2$master_key %in% match,] %>% dplyr::select(-c(sample_ID)) %>% as.data.frame(row.names = 'master_key')
prot3
rownames(prot3) <- prot3$master_key
prot3 <- prot3 %>% dplyr::select(-master_key)
prot3
rna2[rna2$master_key %in% match,]
rna3 <- rna2[rna2$master_key %in% match,] %>% dplyr::select(-name)
rownames(rna3) <- rna3$master_key
rna3 <- rna3 %>% dplyr::select(-master_key)
rna3
match <- intersect(prot2$master_key, rna2$master_key)
prot3 <- prot2[prot2$master_key %in% match,] %>% dplyr::select(-c(sample_ID)) %>% as.data.frame()
rownames(prot3) <- prot3$master_key
prot3 <- prot3 %>% dplyr::select(-master_key)
prot3
str(prot3)
rna3 <- rna2[rna2$master_key %in% match,] %>% dplyr::select(-name) %>% as.data.frame()
rownames(rna3) <- rna3$master_key
rna3 <- rna3 %>% dplyr::select(-master_key)
rna3
str(rna3)
pca.gene <- mixOmics::pca(rna3, ncomp=10, center=TRUE,scale=TRUE)
pca.prot <- mixOmics::pca(prot3, ncomp=10, center=TRUE, scale=TRUE)
plot(pca.gene)
plot(pca.prot)
?plotIndiv
liver.toxicity$treatment[, 4]
liver.toxicity$treatment[, 3]
liver.toxicity$treatment
View(x)
##
meta_3 <- meta[meta$master_key=="match",]
meta_3
##
meta_3 <- meta[meta$master_key %in% match,]
meta_3
##
meta_3 <- meta[meta$master_key %in% match & meta$sample_type %in% c("plasma","RNA"),]
meta_3
meta_3$data_type
unique(meta_3)
match
meta[meta$master_key=="s2_day3",]
view(meta[meta$master_key=="s2_day3",])
meta_3 <- meta[meta$master_key %in% match & meta$sample_type=="RNA",]
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$covid_status,
ind.names = meta_3$patient_ID_ryanlab,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$cohort,
ind.names = meta_3$patient_ID_ryanlab,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$patient_ID_ryanlab,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$patient_ID_ryanlab,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 2')
meta_3
rna3
rownames(rna3)
rownames(rna3) == meta_3$master_key
rownames(prot3) == meta_3$master_key
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$ethnicity,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$age,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$sex,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$ethnicity,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$sex,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Cohort Status Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Hospital Status Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Cohort Status Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$ethnicity,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Race Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 2),
group = meta_3$sex,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Sex Proteomics, PCA comp 1 - 2')
plotIndiv(pca.prot, comp = c(1, 3),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 3')
plotIndiv(pca.prot, comp = c(2, 3),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 3')
plotIndiv(pca.prot, comp = c(1, 3),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'COVID Status Proteomics, PCA comp 1 - 3')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 3),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Hospital Status RNA-seq, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$covid_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid Status RNA-seq, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Hospital Status RNA-seq, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 3),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Hospital Status RNA-seq, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(2, 3),
group = meta_3$hospital_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Hospital Status RNA-seq, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 2),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 2')
plotIndiv(pca.gene, comp = c(1, 3),
group = meta_3$cohort_status,
ind.names = meta_3$master_key,
legend = TRUE, title = 'Covid gene, PCA comp 1 - 3')
plot(pca.gene)
plot(pca.prot)
?spls
spls.covid <- spls(X=rna3, Y=prot3, ncomp = 5, mode="canonical")
rna3
X
type(X)
str(X)
str(rna3)
str(prot3)
spls.covid <- spls(rna3, prot3, ncomp = 5, mode="canonical")
is.numeric(rna3)
is.numeric(prot3)
as.numeric(rna3)
as.matrix(rna3)
spls.covid <- spls(as.matrix(rna3), as.matrix(prot3), ncomp = 5, mode="canonical")
view(rna3)
view(prot3)
rna3 <- rna2[rna2$master_key %in% match,] %>% dplyr::select(-c(name, sample_ID)) %>% as.data.frame()
rownames(rna3) <- rna3$master_key
rna3 <- rna3 %>% dplyr::select(-master_key)
view(rna3)
spls.covid <- spls(X = rna3, Y = prot3, ncomp = 5, mode = "canonical")
# repeated CV tuning of component count
perf.spls.covid <- perf(spls.covid, validation = 'Mfold',
folds = 10, nrepeat = 5)
plot(perf.spls.covid, criterion = 'Q2.total')
# set range of test values for number of variables to use from X dataframe
list.keepX <- c(seq(20, 50, 5))
# set range of test values for number of variables to use from Y dataframe
list.keepY <- c(3:10)
tune.spls.covid <- tune.spls(X = rna3, Y = prot3, ncomp = 2,
test.keepX = list.keepX,
test.keepY = list.keepY,
nrepeat = 1, folds = 10, # use 10 folds
mode = 'canonical', measure = 'cor')
plot(tune.spls.covid)         # use the correlation measure for tuning
tune.spls.covid$choice.keepX
tune.spls.covid$choice.keepY
tune.spls.covid$choice.keepX
tune.spls.covid$choice.keepY
optimal.keepX = 20
optimal.keepY = 10
optimal.ncomp = 1
# use all tuned values from above
final.spls.covid <- spls(X = rna3, Y = prot3, ncomp = optimal.ncomp,
keepX = optimal.keepX,
keepY = optimal.keepY,
mode = "canonical")
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "X-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # colour by time group
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:4),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
comp = 1,
rep.space = "X-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # colour by time group
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:4),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
optimal.ncomp = 2
# use all tuned values from above
final.spls.covid <- spls(X = rna3, Y = prot3, ncomp = optimal.ncomp,
keepX = optimal.keepX,
keepY = optimal.keepY,
mode = "canonical")
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "X-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:4),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "X-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:3),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "Y-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:3),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "XY-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:3),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = meta_3$master_key,
rep.space = "X-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:3),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotIndiv(final.spls.covid, ind.names = TRUE,
rep.space = "XY-variate", # plot in X-variate subspace
group = meta_3$hospital_status, # color by hospital status
pch = as.factor(meta_3$covid_status),
col.per.group = color.mixo(1:3),
legend = TRUE, legend.title = 'Hospitalization', legend.title.pch = 'Covid')
plotArrow(final.spls.covid, ind.names = FALSE,
group = meta_3$hospital_status, # color by time group
col.per.group = color.mixo(1:4),
legend.title = 'Hospital.Group')
plotArrow(final.spls.covid, ind.names = FALSE,
group = meta_3$hospital_status,
pch = as.factor(meta_3$covid_status),# color by time group
col.per.group = color.mixo(1:4),
legend.title = 'Hospital.Group')
plotArrow(final.spls.covid, ind.names = FALSE,
group = meta_3$hospital_status,
pch = meta_3$covid_status,# color by time group
col.per.group = color.mixo(1:4),
legend.title = 'Hospital.Group')
plotArrow(final.spls.covid, ind.names = FALSE,
group = meta_3$cohort_status,
col.per.group = color.mixo(1:4),
legend.title = 'Cohort.Group')
plotVar(final.spls.covid, cex = c(3,4), var.names = c(FALSE, TRUE))
plotVar(final.spls.covid, cex = c(3,4), var.names = c(TRUE, TRUE), cutoff = 0.8)
plotVar(final.spls.covid,
cex = c(3,4),
var.names = c(TRUE, TRUE),
cutoff = 0.75)
plotVar(final.spls.covid,
cex = c(3,4),
var.names = c(TRUE, TRUE),
cutoff = 0.6)
plotVar(final.spls.covid,
cex = c(3,4),
var.names = c(TRUE, TRUE),
cutoff = 0.75)
here()
?plotVar
plotVar(final.spls.covid,
cex = c(3,4),
var.names = c(TRUE, TRUE),
cutoff = 0.75,
style='ggplot')
plotVar(final.spls.covid,
cex = c(3,4),
var.names = c(TRUE, TRUE),
cutoff = 0.75,
style='ggplot2')
plotVar(final.spls.covid,
cex = c(3,3),
var.names = c(TRUE, TRUE),
cutoff = 0.75,
style='ggplot2')
plotVar(final.spls.covid,
cex = c(2,2),
var.names = c(TRUE, TRUE),
cutoff = 0.75,
style='ggplot2')
plotVar(final.spls.covid,
cex = c(2,2),
var.names = c(TRUE, TRUE),
cutoff = 0.75,
style='ggplot2', legend = TRUE)
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge)
color.edge <- color.mixo(50)  # set the colours of the connecting lines
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge)
color.edge <- color.GreenRed(50)  # set the colours of the connecting lines
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge)
save = 'png', # save as a png to the current working directory
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge),
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png', # save as a png to the current working directory
name.save = 'sPLS Covid Hospital Status Network Plot')
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge)
?network
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.8, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge
)
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.8, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge
)
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.8, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png', # save as a png to the current working directory
name.save = 'sPLS Covid Hospital Status Network Plot')
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png', # save as a png to the current working directory
name.save = 'sPLS Covid Hospital Status Network Plot')
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 2,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png', # save as a png to the current working directory
name.save = 'sPLS Covid Hospital Status Network Plot')
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.7, # only show connections with a correlation above 0.7
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
save = 'png', # save as a png to the current working directory
name.save = 'sPLS Covid Hospital Status Network Plot')
lwd.edge = c(2,2)
color.edge <- c("blue","red")  # set the colours of the connecting lines
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.65,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
lwd.edge = c(2,2),
save = 'png',
name.save = here('images','sPLS Covid Hospital Status Network Plot'))
color.edge <- color.jet(100)  # set the colours of the connecting lines
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.65,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
lwd.edge = c(2,2),
save = 'png',
name.save = here('images','sPLS Covid Hospital Status Network Plot'))
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1:2,
cutoff = 0.85,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
lwd.edge = c(2,2),
save = 'png',
name.save = here('images','sPLS Covid Hospital Status Network Plot'))
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.85,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
lwd.edge = c(2,2),
save = 'png',
name.save = here('images','sPLS Covid Hospital Status Network Plot'))
# X11() # To open a new window for Rstudio
network(final.spls.covid, comp = 1,
cutoff = 0.8,
shape.node = c("rectangle", "circle"),
color.node = c("cyan", "pink"),
color.edge = color.edge,
lwd.edge = c(2,2),
save = 'png',
name.save = here('images','sPLS Covid Hospital Status Network Plot'))
view(prot3)
prot3$HGF...145
prot3$HGF...53
cim(final.spls.covid, comp = 1:2, xlab = "clinic", ylab = "genes")
x11()
cim(final.spls.covid, comp = 1:2, xlab = "genes", ylab = "proteins",
save = "png", name.save = here("images","heatmap_network_substructure.png"))
cim(final.spls.covid, comp = 1:2,
xlab = "proteins", ylab = "genes",
cutoff = 0.8,
save = "png", name.save = here("images","heatmap_network_substructure.png"))
cim(final.spls.covid, comp = 1:2,
xlab = "proteins", ylab = "genes",
cutoff = 0.6,
save = "png", name.save = here("images","heatmap_network_substructure.png"))
